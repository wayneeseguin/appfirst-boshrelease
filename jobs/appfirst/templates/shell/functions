#!/bin/bash

fail() { 
  echo "$*" >&2 
  exit 1
}

debug() {
  if [[ ${DEBUG:-"false"} = "true" ]]
  then echo "$*"
  fi
}

user() {
  local _action=$1 ; shift
  case ${_action} in
    (exec)  exec chpst -u "${userName}:${groupName}" "$@" ;;
    (run)   chpst -u "${userName}:${groupName}" "$@"      ;;
    (chown) chown -R "${userName}:${groupName}" "$@"      ;;
  esac
}

send_signal() { 
  pid=$(head -1 ${pidFile})
  if (( ${pid:-0} > 0 ))
  then kill -${1} ${pid}
  fi
}

pre_start() {
  [[ -s ${wrapPath}/AppFirst ]] || ${jobPath}/bin/install

  appfirst_stop

  # In case tag changes from BOSH upstream properties we do this each time:
  cp ${jobPath}/config/AppFirst.init ${wrapPath}/AppFirst.init
  cp ${jobPath}/config/AppFirst.init ${pkgPath}/lib/AppFirst.init
}

appfirst_start() {
  pre_start
  ${jobPath}/bin/jmxcollector_ctl start
  if ${jobPath}/bin/ld_preload check
  then 
    (setsid ${jobPath}/bin/attach 2 &)
    exec ${binary} --piddir=${runPath} --logdir=${logPath} --libdir=${pkgPath}/lib --datadir=${storePath}/data -D
  else fail "appfirst_start(): ld_preload check failed."
  fi
}

appfirst_stop() {
  ${jobPath}/bin/jmxcollector_ctl stop
  # ${jobPath}/bin/ld_preload remove # For BOSH systems we do not want to do this.
  pid=$(pidof ${binary} || true)
  if (( ${pid:-0} > 0 ))
  then
    kill -TERM ${pid}
    sleep 3 # give it 3 seconds to be graceful...
    kill -9 ${pid}
  fi
  rm -f ${pidFile} 
}

appfirst_remove_ld_preload() {
  if [[ -f /etc/ld.so.preload ]]
  then
    export PATH=/usr/bin:/bin
    cp -f /etc/ld.so.preload /etc/AppFirst.ld_preload
    sed -e "#${wrapPath}/libwrap.so#d" /etc/ld.so.preload > /etc/ld.so.preload
    flen=$(stat /etc/ld.so.preload | grep Size | cut -d: -f2 | cut -c1-2)
    if (( ${flen} < 3 ))
    then rm -f /etc/ld.so.preload
    fi
  fi
}

appfirst_check_ld_preload() {
  if [[ -f /etc/AppFirst.ld_preload ]]
  then
    unset LD_PRELOAD
    if [[ -s /etc/ld.so.preload ]]
    then
      value=0
      while read value
      do
        if ! grep -q ${value} /etc/AppFirst.ld_preload
        then cat ${value} >> /etc/AppFirst.ld_preload
        fi
      done < /etc/ld.so.preload
    fi

    if [[ -e /dev/shm ]]
    then
      cp -f /etc/AppFirst.ld_preload /dev/shm/ld_preload
      chmod 0644 /dev/shm/ld_preload
      ln -fs /dev/shm/ld_preload /etc/ld.so.preload
    else
      cp -f /etc/AppFirst.ld_preload /tmp/ld_preload
      ln -fs /tmp/ld_preload /etc/ld.so.preload
    fi
  else
    rm -f /etc/ld.so.preload
    fail "ld_preload: WARNING: preload disabled: no ld_preload"
  fi
}


turn_debugging_on() {
  export PS4='+(${BASH_SOURCE}:${LINENO})> ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
  export DEBUG="true" 
  set -x
  set -v
}

add_packages_to_path() { # Add all packages' /bin & /sbin into $PATH
  for _path in $(ls -d /var/vcap/packages/*/*bin)
  do PATH="${_path}:${PATH}"
  done ; export PATH
}

configure_job_paths() {
  _paths=(
    "${jobPath}"
    "${runPath}"
    "${logPath}"
    "${tmpPath}"
    "${storePath}"
    "${wrapPath}"
    "${pkgPath}"
    "${pkgPath}/lib"
  )

  for _path in "${_paths[@]}"
  do
    if ! [[ -d ${_path} ]]
    then
      mkdir -p "${_path}"
      user chown "${_path}"
      chmod 0775 "${_path}"
    fi
  done
}

